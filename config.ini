[directories]
#The location of the Tape Data json file
JSON File = 
#The directory where the video files are kept
Video Directory = 
#The location of a temporary directory for the script to use (a directory on an SSD is recommended)
Temp Directory = 

[scenesplitter]
#Adjust divisor that determines adjusted RGB Threshold
Median Divisor = 2

#Number of parts to split the audio to avoid hitting the 4GB file size limit while processing
Audio Divisor = 5

#minimum number of seconds
Clip Minimum = 4

#Maximum dB threshold of silence
Silence Threshold = -50

#Change in volume to indicate a possible scene change
Audio Change Threshold = 8

[metatagger]
#name of subdirectory to the working directory to deposit processed files
Output Subdirectory = _tagged

[analysis]
#Choose a model from the gpt-3.5-turbo or gpt-4 options
GPT Model = gpt-4-vision-preview

#Set this value to high or low. A high setting may increase accuracy but will incur a higher API cost. Default: low
Vision Detail Level = low

#Per second frequency of images sent to chatgpt for analysis (for example, a value of 2 will send 1 frame for every 2 seconds of video). A lower number will result in a higher accuracy result, and a higher API cost. Default: 2
Seconds Per Image = 2

#Enter the API Key from OpenAI here
OpenAI API Key = 

#Pricing data for OpenAI API usage, costs are calculated per token and per second
ChatGPT Input Cost = 0.00001
ChatGPT Output Cost = 0.00003
Whisper Cost = 0.0001

#Role and prompt details that are fed to ChatGPT with the video clip data for analysis. Minro changes can be made, but it is not recommended changes are made to the instructions around structure and format of the data.
ChatGPT Role = Your purpose is to identify clips from video broadcasts based on metadata, an audio transcript and the included images that represent 1 video frame for every 2 seconds of video. The provided metadata should include when the content was recorded, on what station and the TV program or movie that was recorded. The clip is most likely a commercial, PSA, news clip, station identification or other broadcast interstitial that takes place during breaks from the indicated program.

ChatGPT Prompt = Using the provided context, identify the video clip and reply with a JSON dictionary with the following key/value pairs:\n\"Air Date\" with the value of the date recorded in YYYY-MM-DD format\n\"Network/Station\" with the Station value\n\"Description\" fill this value with a description of what the clip is based on the available information\n\"Tags\" the value of this one should be a comma separated list of category tags relevent to the clip content. Also include any mentioned tv networks, holidays or seasons\n\"Title\" suggest a short title for the clip based on what is being advertised or promoted, use a descriptor in the title like to indicate what type of clip it is.\n\"Filename\", for this one use the title,the station and the date. Use hyphens in place of spaces, remove or replace any special characters that aren't supported in file names and separate the date at the end from the rest with an underscore such as in following: \"Clip-Title-Station_YYYY-MM-DD\"

[internet archive]
access key = 
secret key = 

[youtube]
#Google OAuth 2.0 Client JSON with YouTube Data API v3 permission
Credentials Path = 

[social]
#RGB value at which scenes are cut
RGB Threshold = 16

#minimum number of seconds
Clip Minimum = 10

#maximum number of seconds
Clip Maximum = 60

#maximum file size in MB
File Size Maximum = 40

#seconds to ignore at front of file
Front Buffer = 2 

#seconds to ignore at end of file
End Buffer = 2 

#minutes between posts
Time Between = 30

[twitter]
Username = 
Consumer Key = 
Consumer Secret = 
Access Token = 
Access Secret = 

[tumblr]
Consumer Key = 
Consumer Secret = 
Access Token = 
Access Secret = 

[mastodon]
Instance URL = 
Access Token = 

[facebook]
Page ID = 
Access Token = 

[discord]
Access Token = 
Channels = 
